main.cpp

Цель кода:

Данный код представляет собой программу, которая запускает два потока - поток таймера и поток удаления. 
Основная цель программы - отслеживать время и выполнять удаление определенных элементов по истечении заданного времени.

Основные функции:

1. Пользователю предлагается ввести количество секунд seconds для функции timer().

2. timer(): Эта функция запускается в отдельном потоке и является основной функцией таймера. Она отслеживает время и выполняет определенные действия при истечении заданного времени.

3. removal(): Эта функция также запускается в отдельном потоке и является основной функцией удаления. Она отвечает за удаление определенных элементов по истечении заданного времени.

4. main(): В основной функции создаются два объекта типа thread, соответствующих потокам timer() и removal(). Затем с помощью метода join() ожидается завершение выполнения обоих потоков, прежде чем программа завершит свою работу.

Как работает программа:

1. Пользователm вводит количество секунд seconds(время игры) для функции timer(). 

1. В главной функции main() создаются два объекта thread, которым передаются соответствующие функции timer() и removal().

2. Оба объекта потоков запускаются и начинают свою работу независимо друг от друга.

3. Поток timer() отслеживает время и, когда время достигает заданного значения, выполняет определенные действия или сообщает об этом.

4. Поток removal() отвечает за удаление определенных элементов и запускается независимо от потока таймера.

5. После запуска потоков, программа ожидает их завершения с помощью метода join(), чтобы гарантировать корректное завершение программы.

Важно отметить, что подразумевается, что функции timer() и removal() реализованы в отдельных файлов и используются в данном коде с помощью директивы #include "functions.h".




Conclusion.cpp

1. Функция conclusion:
   - Описание: Данная функция отвечает за вывод слов из хранилища в соответствии с парами чисел из матрицы. Она использует функцию dectionary для получения слов из хранилища и выводит их на экран.
   - Аргументы: Отсутствуют.
   - Возвращаемое значение: Отсутствуют.

2. Использование setlocale(LC_ALL, "rus"):
   - Описание: Эта строка устанавливает локаль для корректного отображения русских символов в консоли. Это необходимо для правильного отображения слов из хранилища.

3. Использование extern int matrix[5][2]:
   - Описание: Это объявление о том, что переменная matrix типа int[5][2] будет определена в другом месте программы. В данном случае, предполагается, что matrix будет использоваться извне, и его определение будет предоставлено в другом файле или модуле.

4. Цикл for:
   - Описание: Данный цикл проходит по каждой паре чисел в матрице и вызывает функцию dectionary для получения соответствующих слов из хранилища. Затем он выводит эти слова на экран.

5. Файл functions.h:
   - Описание: Предполагается, что файл functions.h содержит объявление функции dectionary и определение переменной matrix. Это позволяет другим частям программы использовать dectionary и matrix без необходимости повторного объявления.





Dectionary.cpp

1. Функция dectionary:

   - Описание: Возвращает слово из хранилища по указанному номеру и языку.
   
   - Аргументы:

     - num: Номер слова в хранилище.
     - lag: Язык, если true, то английский, иначе русский.

   - Возвращаемое значение: Слово из хранилища.


2. Использование char* dectionary(int num,bool lag):

   -Функция dectionary принимает два параметра: num - номер слова в хранилище, lag - язык (если true, то английский, иначе русский). 

3. Использование num *= 2:

   -Чтобы перенестись к указанной паре слов.

4. Использование if ((lag) && (num))
	{
         num--;
        }
   - Проверяет, есть ли значение lag и num, и если оба условия истинны, то уменьшает значение num на 1.

5. Использование return safeWords[num]:

   - Функция возвращает значение safeWords[num], которое предположительно является словом из хранилища по заданному индексу.




Filling.cpp

 1. Функция filling
    -Описание: заполняет двумерный массив случайными числами.

 Код представляет собой функцию "filling()", имеющую целью заполнить двумерный массив "matrix" размером 5x2 случайными значениями. 

    Аргументы:
    - Отсутствуют

    Возвращаемое значение:
    - Отсутствует

Описание работы кода:
1. С помощью функции "srand(time(0))" устанавливается зерно случайности, чтобы генерировать разные случайные числа при каждом запуске программы.

2. Объявляется и инициализируется двумерный массив "matrix[5][2]". 

3. Инициализируются переменные:

   - "num1" и "num2" - случайные числа, сгенерированные с помощью функции "rand()", в диапазоне от 1 до 100.

   - "first" - флаг, указывающий на первое пустое значение в массиве.

   - "random" - случайное булево значение, сгенерированное с помощью функции "rand() & 1".

4. С помощью цикла "for" подсчитывается количество элементов в первом столбце массива "matrix", равных 0, и сохраняется в переменной "num".

5. Если количество таких элементов больше 1, выполняются следующие шаги:

   - Генерируются новые значения для переменных "num1", "num2" и "random".

   - С помощью цикла "for" проходится по каждому элементу первого столбца массива "matrix".

   - Если текущий элемент равен 0 и это первый пустой элемент, ему присваивается значение "num1", а флаг "first" устанавливается в false, чтобы больше не обрабатывать первый пустой элемент.

   - В остальных случаях текущему элементу присваивается значение "num2".

   - С помощью флага "first" определяется первый пустой элемент во втором столбце массива.

   - Если текущий элемент равен 0 и это первый пустой элемент, ему присваивается значение "num1" или "num2" в зависимости от значения флага "random", а флаг "first" устанавливается в false, чтобы больше не обрабатывать первый пустой элемент.

   - В остальных случаях текущему элементу присваивается значение "num2" или "num1" в зависимости от значения флага "random".





Reference.cpp
(Глобальная переменная)

Цель кода:

Данный код представляет собой объявление и инициализацию двумерного массива с названием "matrix". В этом массиве хранятся пары чисел. Каждая строка массива содержит два элемента.

Функции:

Отсутствуют.
Данный код представляет собой только объявление переменной и инициализацию массива.

Переменные:

1. matrix: Это двумерный массив размером 5x2, который хранит пары чисел. Каждая строка массива представляет собой одну пару чисел.

Этот массив хранит следующие пары чисел: (1, 3), (2, 5), (4, 1), (5, 4) и (3, 2).




Removal.cpp

Цель кода:

Данный код представляет собой функцию removal(), которая относится к модулю (файлу) functions.h. Основная цель функции removal() - обрабатывать ввод чисел, проверять совпадения в двумерном массиве matrix, и, при наличии совпадений, устанавливать значения элементов массива, соответствующих найденным совпадениям, равными нулю. После этого вызывается функция filling(), которая, возможно, объявлена в другом месте кода.

Функции:

1. removal(): Основная функция, которая отвечает за удаление пар чисел из массива.

Входные данные:

- Ожидается ввод пользователем двух чисел, num1 и num2.

Процесс:

- Введенные значения num1 и num2 уменьшаются на 1 (для соответствия индексации массива).

- Проверяется, равны ли значения matrix[num1][0] и matrix[num2][1]. Если да, то выполняются действия по удалению пары чисел:
- Значение matrix[num1][0] устанавливается равным 0.
- Значение matrix[num2][1] устанавливается равным 0.

- Если значения не равны, выводится сообщение "Совпадений не найдено."

- Вызывается функция filling(), возможно объявленная в другом месте кода.

- Цикл while (true) гарантирует повторное выполнение кода в функции, чтобы пользователь мог вводить новые значения и выполнить удаление.

Переменные:

  matrix: Двумерный массив размером 5x2, объявленный внешним. Происхождение этого массива не указано в данном коде, поэтому ожидается, что он объявлен и инициализирован в другом месте программы.




Timer.cpp

Функция timer() реализует таймер, используя обратный отсчет в консоли.

Входные данные
От пользователя ожидается ввод количества секунд seconds, на которое нужно установить таймер.

Процесс работы
1. Устанавливается кодировка консоли на кодировку Windows-1251 с помощью функций SetConsoleCP(1251) и SetConsoleOutputCP(1251), чтобы корректно отображались символы кириллицы.

2. В цикле от 0 до seconds выполняются следующие действия:

- Программа задерживается на 1 секунду с помощью функции this_thread::sleep_for(chrono::seconds(1)).

- Меню консоли очищается с помощью команды system("cls").

- Выводится значение seconds - i, представляющее оставшееся количество секунд.

- Вызывается функция conclusion(), возможно объявленная в другом месте кода.

3. По окончании обратного отсчета, выводится сообщение "Таймер истек. Программа будет закрыта."

4. Программа завершает свою работу с помощью функции exit(0), которая используется для корректного завершения программы.